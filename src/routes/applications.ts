import { Router } from 'express';
import { AppDataSource } from '../config/database';
import { Application, ApplicationStatus } from '../entities/Application';
import { User, UserRole } from '../entities/User';
import { authMiddleware, adminMiddleware } from '../middleware/auth';
import axios from 'axios';

const router = Router();
const applicationRepository = AppDataSource.getRepository(Application);
const userRepository = AppDataSource.getRepository(User);

const TELEGRAM_TOKEN = '7738911641:AAHOiXzx9dYqAQZXmpf8hZOoeTRo8gRJoi0';
const ADMIN_CHAT_ID = '973416651';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
function getStatusInRussian(status: ApplicationStatus): string {
  const statusTranslations = {
    [ApplicationStatus.NEW]: '–ù–æ–≤–∞—è',
    [ApplicationStatus.ACCEPTED]: '–ü—Ä–∏–Ω—è—Ç–∞',
    [ApplicationStatus.SUCCESS]: '–£—Å–ø–µ—à–Ω–æ',
    [ApplicationStatus.REJECTED]: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
    [ApplicationStatus.PAID]: '–û–ø–ª–∞—á–µ–Ω–æ'
  };
  return statusTranslations[status] || status;
}

async function sendTelegramToAdmin(text: string) {
  await axios.post(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, {
    chat_id: ADMIN_CHAT_ID,
    text,
    parse_mode: 'HTML',
  });
}

async function sendTelegramToAgent(chatId: string, text: string) {
  await axios.post(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, {
    chat_id: chatId,
    text,
    parse_mode: 'HTML',
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç—ã)
router.post('/', authMiddleware, async (req, res) => {
  try {
    const { clientAddress, clientFullName, clientPhone, comment } = req.body;
    const agentId = req.user?.userId; // –ò–∑ JWT —Ç–æ–∫–µ–Ω–∞

    if (!agentId) {
      return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    }

    const agent = await userRepository.findOne({ where: { id: agentId } });
    if (!agent || agent.role !== UserRole.AGENT) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const application = applicationRepository.create({
      clientAddress,
      clientFullName,
      clientPhone,
      comment,
      agentId
    });

    await applicationRepository.save(application);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ Telegram
    await sendTelegramToAdmin(
      `üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\nüë§ <b>–ê–≥–µ–Ω—Ç:</b> ${agent.fullName}\nüë• <b>–ö–ª–∏–µ–Ω—Ç:</b> ${clientFullName}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${clientPhone}\nüìç <b>–ê–¥—Ä–µ—Å:</b> ${clientAddress}${comment ? `\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${comment}` : ''}\n\nüìä <b>–°—Ç–∞—Ç—É—Å:</b> ${getStatusInRussian(ApplicationStatus.NEW)}`
    );

    res.status(201).json({
      message: '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      application
    });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∞–≥–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏)
router.get('/my', authMiddleware, async (req, res) => {
  try {
    const agentId = req.user?.userId;

    if (!agentId) {
      return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    }

    const applications = await applicationRepository.find({
      where: { agentId },
      order: { createdAt: 'DESC' }
    });

    res.json(applications);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.get('/all', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const userId = req.user?.userId;
    const userRole = req.user?.role;

    if (!userId || userRole !== UserRole.ADMIN) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const applications = await applicationRepository.find({
      relations: ['agent'],
      order: { createdAt: 'DESC' }
    });

    res.json(applications);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.get('/agent/:agentId', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const userId = req.user?.userId;
    const userRole = req.user?.role;
    const { agentId } = req.params;

    if (!userId || userRole !== UserRole.ADMIN) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const applications = await applicationRepository.find({
      where: { agentId: parseInt(agentId) },
      relations: ['agent'],
      order: { createdAt: 'DESC' }
    });

    res.json(applications);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.patch('/:id/status', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const userId = req.user?.userId;
    const userRole = req.user?.role;
    const { id } = req.params;
    const { status } = req.body;

    if (!userId || userRole !== UserRole.ADMIN) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    if (!Object.values(ApplicationStatus).includes(status)) {
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å' });
    }

    const application = await applicationRepository.findOne({ where: { id: parseInt(id) }, relations: ['agent'] });
    if (!application) {
      return res.status(404).json({ message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    application.status = status;
    application.updatedAt = new Date();
    await applicationRepository.save(application);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
    if (application.agent && application.agent.telegramChatId) {
      await sendTelegramToAgent(
        application.agent.telegramChatId,
        `üìä <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏</b>\n\nüë• <b>–ö–ª–∏–µ–Ω—Ç:</b> ${application.clientFullName}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${application.clientPhone}\nüìç <b>–ê–¥—Ä–µ—Å:</b> ${application.clientAddress}\n\nüîÑ <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> ${getStatusInRussian(status)}`
      );
    }

    res.json({
      message: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω',
      application
    });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.delete('/:id', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const userId = req.user?.userId;
    const userRole = req.user?.role;
    const { id } = req.params;

    if (!userId || userRole !== UserRole.ADMIN) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const application = await applicationRepository.findOne({ where: { id: parseInt(id) } });
    if (!application) {
      return res.status(404).json({ message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    await applicationRepository.remove(application);
    res.json({ message: '–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router; 